# bot/handlers.py
from telegram import Update
from telegram.ext import ContextTypes
from audio.tts_service import get_audio
from training.plans.timed_fartlek_plan import TimedFartlekPlan
import asyncio
import os

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–µ–≥–æ–≤–æ–π –∫–æ—É—á. –ñ–º–∏ /fartlek")

async def fartlek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    intro_text = "üî• –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä—Ç–ª–µ–∫! 5 –º–∏–Ω—É—Ç —Ä–∞–∑–º–∏–Ω–∫–∏. –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è!"
    audio_path = get_audio(intro_text)
    
    if os.path.exists(audio_path):
        with open(audio_path, "rb") as audio:
            await update.message.reply_audio(
                audio=audio,
                title="–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                caption="üéß –°–ª—É—à–∞–π –∏ —Å–ª–µ–¥—É–π —É–∫–∞–∑–∞–Ω–∏—è–º!"
            )
    
    # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.application.create_task(send_training_messages(context, chat_id))

async def send_training_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∞–π–º–µ—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ TimedFartlekPlan"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    plan = TimedFartlekPlan()
    phases = plan.phases
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–∏–Ω–≥–∞–º–∏
    messages = []
    cumulative_time = 300  # 5 –º–∏–Ω—É—Ç —Ä–∞–∑–º–∏–Ω–∫–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–∑—ã –∏–∑ –ø–ª–∞–Ω–∞
    for phase in phases:
        if phase.phase_type == "warmup":
            continue  # –£–∂–µ —É—á–ª–∏ –≤ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏
            
        elif phase.phase_type == "run":
            minutes = phase.duration // 60
            seconds = phase.duration % 60
            if seconds == 0:
                text = f"üü° –ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç –≤ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º —Ç–µ–º–ø–µ!"
            else:
                text = f"üü° –ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥ –≤ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º —Ç–µ–º–ø–µ!"
                
        elif phase.phase_type == "rest":
            minutes = phase.duration // 60
            seconds = phase.duration % 60
            if seconds == 0:
                text = f"üü¢ –û—Ç–¥—ã—Ö: {minutes} –º–∏–Ω—É—Ç. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Å—å."
            else:
                text = f"üü¢ –û—Ç–¥—ã—Ö: {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Å—å."
                
        elif phase.phase_type == "cooldown":
            text = "üîµ –ó–∞–º–∏–Ω–∫–∞: 3 –º–∏–Ω—É—Ç—ã —Ö–æ–¥—å–±—ã. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        
        else:
            continue
            
        messages.append({
            "delay": cumulative_time,
            "text": text
        })
        
        cumulative_time += phase.duration
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.append({
        "delay": cumulative_time,
        "text": "üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü!"
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É
    start_time = asyncio.get_event_loop().time()
    
    for item in messages:
        # –ñ–¥—ë–º –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è
        delay = item["delay"]
        elapsed = asyncio.get_event_loop().time() - start_time
        sleep_time = max(0, delay - elapsed)
        
        if sleep_time > 0:
            await asyncio.sleep(sleep_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞—É–¥–∏–æ (–∞–≤—Ç–æ–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ)
        text = item["text"]
        try:
            audio_path = get_audio(text)
            if os.path.exists(audio_path):
                with open(audio_path, "rb") as audio:
                    await context.bot.send_audio(
                        chat_id=chat_id,
                        audio=audio,
                        title="–¢—Ä–µ–Ω–µ—Ä",
                        caption=text
                    )
            else:
                await context.bot.send_message(chat_id=chat_id, text=text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
            await context.bot.send_message(chat_id=chat_id, text=text)