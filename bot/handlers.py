# bot/handlers.py
from telegram import Update
from telegram.ext import ContextTypes
from audio.tts_service import get_audio
from training.plans.timed_fartlek_plan import TimedFartlekPlan
from web.server import WebServer
import os
import shutil
import json

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
web_server = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–µ–≥–æ–≤–æ–π –∫–æ—É—á. –ñ–º–∏ /fartlek")

async def fartlek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global web_server
    
    chat_id = update.effective_chat.id
    await update.message.reply_text("üî• –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ–≥–∏–¥ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞
        create_web_player_playlist()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        if web_server is None:
            web_server = WebServer(port=8000)
        
        if not web_server.is_running():
            web_server.start()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        await update.message.reply_text(
            "üéß –ê—É–¥–∏–æ–≥–∏–¥ –≥–æ—Ç–æ–≤!\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:8000\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–±–µ–∂–∫–∏!"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def create_silence_file(duration_seconds, directory, filename):
    """–°–æ–∑–¥–∞—ë—Ç MP3 —Ñ–∞–π–ª —Å —Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ç–∏—à–∏–Ω—ã (–±–µ–∑ pydub)"""
    
    silence_path = os.path.join(directory, filename)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–∏—à–∏–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    silent_template = os.path.join("audio_cache", "silence_template.mp3")
    
    # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º
    if not os.path.exists(silent_template):
        create_silence_template(silent_template)
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # MP3: ~40KB –≤ —Å–µ–∫—É–Ω–¥—É –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    target_bytes = duration_seconds * 40 * 1024  # 40KB/—Å–µ–∫
    
    with open(silence_path, "wb") as outfile:
        bytes_written = 0
        
        with open(silent_template, "rb") as template:
            template_data = template.read()
            
            while bytes_written < target_bytes:
                remaining_bytes = target_bytes - bytes_written
                write_size = min(len(template_data), remaining_bytes)
                outfile.write(template_data[:write_size])
                bytes_written += write_size
    
    print(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–∏—à–∏–Ω–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥: {silence_path}")
    return silence_path

def create_silence_template(template_path):
    """–°–æ–∑–¥–∞—ë—Ç —à–∞–±–ª–æ–Ω —Ç–∏—à–∏–Ω—ã"""
    from gtts import gTTS
    
    # –°–æ–∑–¥–∞—ë–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏ —Ç–∏—Ö–∏–π –∑–≤—É–∫
    tts = gTTS(text=".", lang='ru', slow=True, tld='ru')
    tts.save(template_path)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    with open(template_path, "rb") as infile:
        data = infile.read()
    
    with open(template_path, "wb") as outfile:
        for _ in range(10):
            outfile.write(data)

def create_music_file(duration_seconds, directory, filename):
    """–°–æ–∑–¥–∞—ë—Ç –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∏—à–∏–Ω—É)"""
    
    music_path = os.path.join(directory, filename)
    
    # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    source_file = f"background_{duration_seconds}sec.mp3"
    source_path = os.path.join("web", "audio", source_file)
    
    if os.path.exists(source_path):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        shutil.copy2(source_path, music_path)
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {source_file}")
        return music_path
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ - —Å–æ–∑–¥–∞—ë–º —Ç–∏—à–∏–Ω—É
        print(f"–§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º —Ç–∏—à–∏–Ω—É {duration_seconds} —Å–µ–∫")
        return create_silence_file(duration_seconds, directory, filename)

def create_web_player_playlist():
    """–°–æ–∑–¥–∞—ë—Ç –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –≤–µ–±-–ø–ª–µ–µ—Ä–∞"""
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∞—É–¥–∏–æ
    web_audio_dir = os.path.join("web", "audio")
    os.makedirs(web_audio_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    plan = TimedFartlekPlan()
    
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
    playlist = []
    
    # 1. –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    intro_msg = "üî• –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä—Ç–ª–µ–∫! 5 –º–∏–Ω—É—Ç —Ä–∞–∑–º–∏–Ω–∫–∏. –õ—ë–≥–∫–∏–π –±–µ–≥ –∏–ª–∏ —Ö–æ–¥—å–±–∞."
    intro_path = get_audio(intro_msg)
    intro_dest = os.path.join(web_audio_dir, "01_intro.mp3")
    shutil.copy2(intro_path, intro_dest)
    playlist.append({
        "file": "audio/01_intro.mp3",
        "title": "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "type": "speech",
        "duration": 0
    })
    
    print("=== –°–æ–∑–¥–∞—ë–º —Ä–∞–∑–º–∏–Ω–∫—É 5 –º–∏–Ω—É—Ç ===")
    
    # 2. –ú—É–∑—ã–∫–∞ —Ä–∞–∑–º–∏–Ω–∫–∏ (5 –º–∏–Ω—É—Ç = 300 —Å–µ–∫—É–Ω–¥)
    warmup_file = create_music_file(300, web_audio_dir, "02_warmup.mp3")
    playlist.append({
        "file": "audio/02_warmup.mp3",
        "title": "–†–∞–∑–º–∏–Ω–∫–∞ 5 –º–∏–Ω—É—Ç",
        "type": "music",
        "duration": 300
    })
    
    # 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    track_number = 3
    
    for i, phase in enumerate(plan.phases):
        if phase.phase_type == "warmup":
            continue
            
        elif phase.phase_type == "run":
            minutes = phase.duration // 60
            text = f"üü° –ò–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç –≤ —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–º —Ç–µ–º–ø–µ!"
            
        elif phase.phase_type == "rest":
            minutes = phase.duration // 60
            text = f"üü¢ –û—Ç–¥—ã—Ö: {minutes} –º–∏–Ω—É—Ç. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Å—å."
            
        elif phase.phase_type == "cooldown":
            text = "üîµ –ó–∞–º–∏–Ω–∫–∞: 3 –º–∏–Ω—É—Ç—ã —Ö–æ–¥—å–±—ã. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
        print(f"=== –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ {track_number}: {text} ===")
        msg_path = get_audio(text)
        msg_filename = f"{track_number:02d}_message.mp3"
        msg_dest = os.path.join(web_audio_dir, msg_filename)
        shutil.copy2(msg_path, msg_dest)
        playlist.append({
            "file": f"audio/{msg_filename}",
            "title": text,
            "type": "speech",
            "duration": 0
        })
        track_number += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É/–ø–∞—É–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        music_duration = phase.duration
        music_filename = f"{track_number:02d}_music.mp3"
        
        print(f"=== –°–æ–∑–¥–∞—ë–º –º—É–∑—ã–∫—É {track_number}: {music_duration} —Å–µ–∫ ===")
        # –°–æ–∑–¥–∞—ë–º –º—É–∑—ã–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        music_file = create_music_file(music_duration, web_audio_dir, music_filename)
        
        playlist.append({
            "file": f"audio/{music_filename}",
            "title": f"–ú—É–∑—ã–∫–∞ {music_duration} —Å–µ–∫",
            "type": "music", 
            "duration": music_duration
        })
        track_number += 1
    
    # 4. –§–∏–Ω–∞–ª
    final_msg = "üèÜ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü!"
    final_path = get_audio(final_msg)
    final_filename = f"{track_number:02d}_final.mp3"
    final_dest = os.path.join(web_audio_dir, final_filename)
    shutil.copy2(final_path, final_dest)
    playlist.append({
        "file": f"audio/{final_filename}",
        "title": "–§–∏–Ω–∞–ª",
        "type": "speech",
        "duration": 0
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    playlist_path = os.path.join("web", "playlist.json")
    with open(playlist_path, "w", encoding="utf-8") as f:
        json.dump(playlist, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {len(playlist)} —Ç—Ä–µ–∫–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ===")
    for file_info in playlist:
        filepath = os.path.join("web", file_info["file"])
        if os.path.exists(filepath):
            size = os.path.getsize(filepath)
            print(f"‚úÖ {file_info['file']}: {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {file_info['file']}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return playlist